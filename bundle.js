!function(t){var e={};function s(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(i,o,function(e){return t[e]}.bind(null,o));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="/double-range/",s(s.s=1)}([function(t,e,s){},function(t,e,s){"use strict";s.r(e);s(0);new class{constructor(t){this.control={elem:t},this.form=this.control.elem.closest("form"),this.thumbs={from:{elem:this.control.elem.querySelector(".double-range__thumb--from")},to:{elem:this.control.elem.querySelector(".double-range__thumb--to")},currentKey:null,current:null,min:null,max:null},this.thumbsList={from:this.thumbs.from,to:this.thumbs.to},this.inputs={from:this.control.elem.querySelector(".double-range__input--from"),to:this.control.elem.querySelector(".double-range__input--to")},this.values={from:this.control.elem.querySelector(".double-range__label-text--from"),to:this.control.elem.querySelector(".double-range__label-text--to")},this.coords={x:0,min:null,max:null},this.maxValue=this.inputs.to.max,this.setThumbPosition=this.setThumbPosition.bind(this),this.pointerDown=this.pointerDown.bind(this),this.moveThumb=this.moveThumb.bind(this),this.stopDrag=this.stopDrag.bind(this),this.reset=this.reset.bind(this),this.init()}reset(){this.control.coords=this.control.elem.getBoundingClientRect(),this.thumbs.width=this.thumbs.from.elem.offsetWidth,this.thumbs.maxLeft=this.control.elem.offsetWidth-this.thumbs.width,this.coords.min=0,this.coords.max=this.thumbs.maxLeft,this.setThumbPosition()}init(){this.reset(),this.disableDefaultDragstart(),this.addEvents()}disableDefaultDragstart(){Object.values(this.thumbsList).forEach(t=>{t.ondragstart=()=>!1})}setThumbPosition(t={}){const{inputKey:e,reset:s}=t;for(const t in this.thumbsList){if(e&&e!==t)continue;const i=this.inputs[t],o=this.thumbs[t].elem,n=this.values[t],r=this.control.elem.clientWidth;if("from"===t){const t=this.inputs.to,e=+i.value,s=+t.value;e>=s&&(i.value=s-t.step)}else{const t=this.inputs.from,e=+i.value,s=+t.value,o=+t.step;e<=s&&(i.value=s+o)}const u=s?i.defaultValue:i.value;let h=u/this.maxValue*(r-this.thumbs.width);h=h.toFixed(),this.thumbs[t].x=h,o.style.left=`${h}px`,n.innerHTML=u,n.style.left=`${h}px`}}addEvents(){for(const t in this.inputs){const e=this.inputs[t];this.thumbs[t].elem.ondragstart=()=>!1,e.addEventListener("input",()=>{this.setThumbPosition({inputKey:t})})}this.control.elem.addEventListener("pointerdown",this.pointerDown),window.addEventListener("resize",this.reset),this.form.addEventListener("reset",()=>{this.setThumbPosition({reset:!0})})}pointerDown(){const t=event.target.dataset.key;t&&(event.preventDefault(),this.thumbs.currentKey=t,this.thumbs.current=this.thumbs[t],this.startDrag())}startDrag(){const t=this.thumbs.current.elem.getBoundingClientRect();this.thumbs.offset=event.pageX-t.left,this.elemCoords=this.control.elem.getBoundingClientRect(),this.control.elem.addEventListener("pointermove",this.moveThumb),this.control.elem.addEventListener("pointerup",this.stopDrag),document.addEventListener("pointerup",this.stopDrag)}moveThumb(t){this.coords.x=t.pageX-this.elemCoords.left-this.thumbs.offset;const e=this.coords.max,s=this.thumbs.currentKey,i=this.coords.x/e*this.maxValue;this.inputs[s].value=i,this.inputs[s].focus(),this.setThumbPosition({inputKey:s})}stopDrag(){this.control.elem.removeEventListener("pointermove",this.moveThumb),this.control.elem.removeEventListener("pointerup",this.stopDrag),document.removeEventListener("pointerup",this.stopDrag)}}(document.querySelector(".double-range"))}]);