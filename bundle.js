!function(t){var e={};function n(s){if(e[s])return e[s].exports;var o=e[s]={i:s,l:!1,exports:{}};return t[s].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,s){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(s,o,function(e){return t[e]}.bind(null,o));return s},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/double-range/",n(n.s=2)}([function(t,e,n){},function(t,e,n){},function(t,e,n){"use strict";n.r(e);const s="content"in document.createElement("template")?function(t){const e=document.createElement("template");return e.innerHTML=t,e.content.firstElementChild}:function(t){const e=document.createElement("div");return e.innerHTML=t,e.firstElementChild};n(0);class o{constructor(t){this.render(t),this.control={elem:this.elem},this.form=this.control.elem.closest("form"),this.thumbs={from:{elem:this.control.elem.querySelector(".double-range__thumb--from")},to:{elem:this.control.elem.querySelector(".double-range__thumb--to")},currentKey:null,current:null,min:null,max:null},this.thumbsList={from:this.thumbs.from,to:this.thumbs.to},this.inputs={from:this.control.elem.querySelector(".double-range__input--from"),to:this.control.elem.querySelector(".double-range__input--to")},this.values={from:this.control.elem.querySelector(".double-range__label-text--from"),to:this.control.elem.querySelector(".double-range__label-text--to")},this.coords={x:0,min:null,max:null},this.maxValue=this.inputs.to.max,this.setThumbPosition=this.setThumbPosition.bind(this),this.pointerDown=this.pointerDown.bind(this),this.moveThumb=this.moveThumb.bind(this),this.stopDrag=this.stopDrag.bind(this),this.reset=this.reset.bind(this),this.init()}render(t){const e=function({tmpl:t,data:e}){if(t&&e)return t.replace(/{([^"]{1,})}/g,(t,n)=>void 0!==e[n]?e[n]:"")}({tmpl:'\n<div class="{class} double-range">\n  <span\n    class="double-range__line"\n  ></span>\n\n  <label class="double-range__label">\n    <span\n      class="\n        double-range__label-text\n        double-range__label-text--from"></span>\n    <input\n      class="\n        double-range__input\n        double-range__input--from"\n      type="range"\n      min="{min}"\n      max="{max}"\n      step="{step}"\n      value="{valueMin}"\n      name="doube-range"\n      data-key="from"\n    >\n    <span\n      class="\n        double-range__thumb\n        double-range__thumb--from"\n      data-key="from"\n    ></span>\n  </label>\n\n  <label class="double-range__label">\n    <span\n      class="\n        double-range__label-text\n        double-range__label-text--to"></span>\n    <input\n      class="\n        double-range__input\n        double-range__input--to"\n      type="range"\n      min="{min}"\n      max="{max}"\n      step="{step}"\n      value="{valueMax}"\n      name="doube-range"\n      data-key="to"\n    >\n    <span\n      class="\n        double-range__thumb\n        double-range__thumb--to"\n      data-key="to"\n    ></span>\n  </label>\n</div>\n',data:{class:t.className,...t.dataset}});this.elem=s(e),t.replaceWith(this.elem)}init(){this.reset(),this.disableDefaultDragstart(),this.addEvents()}reset(){this.control.coords=this.control.elem.getBoundingClientRect(),this.thumbs.width=this.thumbs.from.elem.offsetWidth,this.thumbs.maxLeft=this.control.elem.offsetWidth-this.thumbs.width,this.coords.min=0,this.coords.max=this.thumbs.maxLeft,this.setThumbPosition()}disableDefaultDragstart(){Object.values(this.thumbsList).forEach(t=>{t.ondragstart=()=>!1})}setThumbPosition(t={}){const{inputKey:e,reset:n}=t;for(const t in this.thumbsList){if(e&&e!==t)continue;const s=this.inputs[t],o=this.thumbs[t].elem,i=this.values[t],r=this.control.elem.clientWidth;if("from"===t){const t=this.inputs.to,e=+s.value,n=+t.value;e>=n&&(s.value=n-t.step)}else{const t=this.inputs.from,e=+s.value,n=+t.value,o=+t.step;e<=n&&(s.value=n+o)}const l=n?s.defaultValue:s.value;let u=l/this.maxValue*(r-this.thumbs.width);u=u.toFixed(),this.thumbs[t].x=u,o.style.left=`${u}px`,i.innerHTML=l,i.style.left=`${u}px`}}addEvents(){for(const t in this.inputs){const e=this.inputs[t];this.thumbs[t].elem.ondragstart=()=>!1,e.addEventListener("input",()=>{this.setThumbPosition({inputKey:t})})}this.control.elem.addEventListener("pointerdown",this.pointerDown),window.addEventListener("resize",this.reset),this.form.addEventListener("reset",()=>{this.setThumbPosition({reset:!0})})}pointerDown(t){const e=t.target.dataset.key;e&&(t.preventDefault(),this.thumbs.currentKey=e,this.thumbs.current=this.thumbs[e],this.startDrag())}startDrag(){const t=this.thumbs.current.elem.getBoundingClientRect();this.thumbs.offset=event.pageX-t.left,this.elemCoords=this.control.elem.getBoundingClientRect(),this.control.elem.addEventListener("pointermove",this.moveThumb),this.control.elem.addEventListener("pointerup",this.stopDrag),document.addEventListener("pointerup",this.stopDrag)}moveThumb(t){this.coords.x=t.pageX-this.elemCoords.left-this.thumbs.offset;const e=this.coords.max,n=this.thumbs.currentKey,s=this.coords.x/e*this.maxValue;this.inputs[n].value=s,this.inputs[n].focus(),this.setThumbPosition({inputKey:n})}stopDrag(){this.control.elem.removeEventListener("pointermove",this.moveThumb),this.control.elem.removeEventListener("pointerup",this.stopDrag),document.removeEventListener("pointerup",this.stopDrag)}}n(1);const i=document.querySelector('[data-elem="double-range"]');i&&new o(i)}]);